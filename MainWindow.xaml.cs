using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Threading;
using DynaNoty.Interfaces;
using DynaNoty.Configuration;
using DynaNoty.Models;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace DynaNoty
{
    public partial class MainWindow : Window
    {
        private readonly INotificationService _notificationService;
        private readonly ILogger<MainWindow> _logger;
        private readonly IServiceProvider _serviceProvider;

        public MainWindow(INotificationService notificationService, ILogger<MainWindow> logger = null, IServiceProvider serviceProvider = null)
        {
            InitializeComponent();
            _notificationService = notificationService ?? throw new System.ArgumentNullException(nameof(notificationService));
            _logger = logger;
            _serviceProvider = serviceProvider;

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            _notificationService.NotificationDismissed += OnNotificationDismissed;
            _notificationService.NotificationActionClicked += OnNotificationActionClicked;

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
            this.KeyDown += MainWindow_KeyDown;
        }

        private void TestNotification_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                _logger?.LogInformation("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ");
                _notificationService.ShowNotification("Test Notification", "This is a test notification from DynaNoty!");
                _logger?.LogInformation("–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                var activeCount = _notificationService.ActiveNotificationCount;
                _logger?.LogInformation($"–ê–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {activeCount}");

                MessageBox.Show($"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ê–∫—Ç–∏–≤–Ω—ã—Ö: {activeCount}", "–¢–µ—Å—Ç", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (System.Exception ex)
            {
                _logger?.LogError(ex, "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
                MessageBox.Show($"–û—à–∏–±–∫–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TestMusicNotification_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                _notificationService.ShowMusicNotification("Now Playing", "Bohemian Rhapsody", "Queen");
                _logger?.LogInformation("–ü–æ–∫–∞–∑–∞–Ω–æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ");
            }
            catch (System.Exception ex)
            {
                _logger?.LogError(ex, "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
                MessageBox.Show($"–û—à–∏–±–∫–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TestCallNotification_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                _notificationService.ShowCallNotification("Incoming Call", "John Doe", "üìû");
                _logger?.LogInformation("–ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–≤–æ–Ω–∫–µ");
            }
            catch (System.Exception ex)
            {
                _logger?.LogError(ex, "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–µ");
                MessageBox.Show($"–û—à–∏–±–∫–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }


        private void TestDetailNotification_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var subtitle = "–û—Ç: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n–≠—Ç–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.";

                _notificationService.ShowNotification(
                    "üìß –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    subtitle,
                    "üìß"
                );

                MessageBox.Show("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –Ω–µ–º—É –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è.", "–¢–µ—Å—Ç", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º");
                MessageBox.Show($"–û—à–∏–±–∫–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void TestActionsNotification_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var actions = new List<NotificationAction>
                {
                    new NotificationAction("reply", "–û—Ç–≤–µ—Ç–∏—Ç—å", "reply_data", "üí¨"),
                    new NotificationAction("mark_read", "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ", "mark_read_data", "‚úÖ"),
                    new NotificationAction("delete", "–£–¥–∞–ª–∏—Ç—å", "delete_data", "üóëÔ∏è")
                };

                var subtitle = "–ì—Ä—É–ø–ø–∞: –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏\n–£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å, –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å.";

                _notificationService.ShowNotification(
                    "üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ",
                    subtitle,
                    "üí¨",
                    actions
                );

                MessageBox.Show("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –Ω–µ–º—É –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.", "–¢–µ—Å—Ç", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏");
                MessageBox.Show($"–û—à–∏–±–∫–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void SettingsButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var settingsWindow = new SettingsWindow(
                    _serviceProvider.GetRequiredService<NotificationConfiguration>(),
                    _serviceProvider.GetRequiredService<INotificationService>(),
                    _serviceProvider.GetRequiredService<ILogger<SettingsWindow>>()
                );
                settingsWindow.ShowDialog();
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫");
                MessageBox.Show($"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Exit_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                _notificationService.ClearAllNotifications();
                _logger?.LogInformation("–û—á–∏—â–µ–Ω—ã –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
            }
            catch (System.Exception ex)
            {
                _logger?.LogError(ex, "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
            }

            Application.Current.Shutdown();
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π —à–∞–ø–∫–∏
        private void TitleBar_MouseLeftButtonDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ —à–∞–ø–∫–µ - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å/—Å–≤–µ—Ä–Ω—É—Ç—å –æ–∫–Ω–æ
                if (this.WindowState == WindowState.Maximized)
                    this.WindowState = WindowState.Normal;
                else
                    this.WindowState = WindowState.Maximized;
            }
            else
            {
                // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
                this.DragMove();
            }
        }

        private void MinimizeButton_Click(object sender, RoutedEventArgs e)
        {
            this.WindowState = WindowState.Minimized;
        }

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            Exit_Click(sender, e);
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        private void MainWindow_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            // Ctrl + S - –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (e.Key == System.Windows.Input.Key.S &&
                (System.Windows.Input.Keyboard.Modifiers & System.Windows.Input.ModifierKeys.Control) == System.Windows.Input.ModifierKeys.Control)
            {
                SettingsButton_Click(sender, new RoutedEventArgs());
                e.Handled = true;
            }
            // Ctrl + T - —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            else if (e.Key == System.Windows.Input.Key.T &&
                     (System.Windows.Input.Keyboard.Modifiers & System.Windows.Input.ModifierKeys.Control) == System.Windows.Input.ModifierKeys.Control)
            {
                TestNotification_Click(sender, new RoutedEventArgs());
                e.Handled = true;
            }
            // Escape - –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
            else if (e.Key == System.Windows.Input.Key.Escape)
            {
                this.Close();
                e.Handled = true;
            }
        }

        private void OnNotificationDismissed(object sender, Events.NotificationDismissedEventArgs e)
        {
            _logger?.LogDebug("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {NotificationId} –∑–∞–∫—Ä—ã—Ç–æ –≤ {DismissedAt}",
                e.NotificationId, e.DismissedAt);
        }

        private void OnNotificationActionClicked(object sender, Models.NotificationActionEventArgs e)
        {
            _logger?.LogDebug("–ù–∞–∂–∞—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ {ActionId} - {ActionText}",
                e.ActionId, e.ActionText);
        }

        protected override void OnClosed(System.EventArgs e)
        {
            // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
            if (_notificationService != null)
            {
                _notificationService.NotificationDismissed -= OnNotificationDismissed;
                _notificationService.NotificationActionClicked -= OnNotificationActionClicked;
            }

            base.OnClosed(e);
        }
    }
}
