using System;
using DynaNoty.Interfaces;
using DynaNoty.Models;

namespace DynaNoty.Services.Handlers
{
    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    /// </summary>
    public class StandardNotificationHandler : INotificationTypeHandler
    {
        public int Priority => 10; // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        public bool CanHandle(NotificationType type)
        {
            return type == NotificationType.Standard;
        }

        public void ShowNotification(DynamicIslandNotification notification, NotificationData data)
        {
            if (notification == null)
                throw new ArgumentNullException(nameof(notification));
            if (data == null)
                throw new ArgumentNullException(nameof(data));

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            var title = string.IsNullOrWhiteSpace(data.Title) ? "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ" : data.Title.Trim();
            var subtitle = data.Subtitle?.Trim() ?? string.Empty;
            var icon = string.IsNullOrWhiteSpace(data.Icon) ? "üîî" : data.Icon.Trim();

            System.Diagnostics.Debug.WriteLine($"StandardNotificationHandler.ShowNotification –≤—ã–∑–≤–∞–Ω: {title} - {subtitle}");
            notification.ShowNotification(title, subtitle, icon, true, data.Actions);
            System.Diagnostics.Debug.WriteLine("StandardNotificationHandler.ShowNotification –∑–∞–≤–µ—Ä—à–µ–Ω");
        }
    }
}
