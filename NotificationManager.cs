using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Windows.Threading;
using DynaNoty.Interfaces;
using DynaNoty.Models;
using DynaNoty.Events;
using DynaNoty.Services;
using DynaNoty.Configuration;
using Microsoft.Extensions.Logging;

namespace DynaNoty
{
    /// <summary>
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Dynamic Island —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
    /// </summary>
    public class NotificationManager : INotificationService
    {
        private readonly INotificationWindow _notificationWindow;
        private DispatcherTimer _cleanupTimer;
        private readonly NotificationConfiguration _config;
        private readonly INotificationQueue _queue;
        private readonly INotificationDisplayManager _displayManager;
        private readonly INotificationLifecycleManager _lifecycleManager;
        private readonly IErrorHandler _errorHandler;
        private readonly IRateLimiter _rateLimiter;
        private readonly IPerformanceMonitor _performanceMonitor;
        private readonly ISystemNotificationService _systemNotificationService;
        private readonly ILogger<NotificationManager> _logger;
        private readonly object _queueProcessingLock = new object();
        private bool _disposed = false;

        public event EventHandler<NotificationDismissedEventArgs> NotificationDismissed
        {
            add => _displayManager.NotificationDismissed += value;
            remove => _displayManager.NotificationDismissed -= value;
        }

        public event EventHandler<Models.NotificationActionEventArgs> NotificationActionClicked
        {
            add => _displayManager.NotificationActionClicked += value;
            remove => _displayManager.NotificationActionClicked -= value;
        }

        public int ActiveNotificationCount => _lifecycleManager.ActiveNotificationCount;

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        /// </summary>
        public (int Active, int PoolSize, int TotalCreated, int ReuseRate) GetPerformanceStats()
        {
            // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            return (_lifecycleManager.ActiveNotificationCount, 0, 0, 0);
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç NotificationManager —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        /// </summary>
        public NotificationManager(NotificationManagerDependencies dependencies)
        {
            if (dependencies == null)
                throw new ArgumentNullException(nameof(dependencies));

            _config = dependencies.Config ?? new NotificationConfiguration();

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            ValidateConfiguration(_config);
            _logger = dependencies.Logger;
            _queue = dependencies.Queue ?? new NotificationQueue(dependencies.LoggerFactory?.CreateLogger<NotificationQueue>());
            _errorHandler = dependencies.ErrorHandler ?? new ErrorHandler(dependencies.LoggerFactory?.CreateLogger<ErrorHandler>());
            _rateLimiter = dependencies.RateLimiter ?? new RateLimiter(
                _config,
                dependencies.LoggerFactory?.CreateLogger<RateLimiter>());
            _performanceMonitor = dependencies.PerformanceMonitor ?? new PerformanceMonitor(dependencies.LoggerFactory?.CreateLogger<PerformanceMonitor>());
            _systemNotificationService = dependencies.SystemNotificationService ?? new SystemNotificationService(dependencies.LoggerFactory?.CreateLogger<SystemNotificationService>());
            _notificationWindow = dependencies.NotificationWindow ?? new NotificationWindow(_config);
            _lifecycleManager = dependencies.LifecycleManager ?? CreateDefaultLifecycleManager(_notificationWindow, _config, dependencies.LoggerFactory);
            _displayManager = dependencies.DisplayManager ?? CreateDefaultDisplayManager(_lifecycleManager, dependencies.LoggerFactory);

            InitializeManager();
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç NotificationManager —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        /// </summary>
        public NotificationManager(
            INotificationWindow notificationWindow = null,
            NotificationConfiguration config = null,
            INotificationQueue queue = null,
            INotificationDisplayManager displayManager = null,
            INotificationLifecycleManager lifecycleManager = null,
            IErrorHandler errorHandler = null,
            IRateLimiter rateLimiter = null,
            IPerformanceMonitor performanceMonitor = null,
            ISystemNotificationService systemNotificationService = null,
            ILogger<NotificationManager> logger = null,
            ILoggerFactory loggerFactory = null)
            : this(new NotificationManagerDependencies
            {
                NotificationWindow = notificationWindow,
                Config = config,
                Queue = queue,
                DisplayManager = displayManager,
                LifecycleManager = lifecycleManager,
                ErrorHandler = errorHandler,
                RateLimiter = rateLimiter,
                PerformanceMonitor = performanceMonitor,
                SystemNotificationService = systemNotificationService,
                Logger = logger,
                LoggerFactory = loggerFactory
            })
        {
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        /// </summary>
        private void InitializeManager()
        {
            // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –ø–æ–∫–∞–∂–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –µ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

            // –¢–∞–π–º–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
            _cleanupTimer = new DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(_config.CleanupIntervalSeconds)
            };
            _cleanupTimer.Tick += OnCleanupTimerTick;
            _cleanupTimer.Start();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            InitializeSystemNotifications();

            _logger?.LogInformation("NotificationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: AutoHide={AutoHide}s, MaxWidth={MaxWidth}px, SystemNotifications={SystemNotifications}",
                _config.AutoHideTimeoutSeconds, _config.MaxNotificationWidth, _config.EnableSystemNotifications);
        }

        public void ShowNotification(string title, string subtitle, string icon = "üîî", List<NotificationAction> actions = null)
        {
            ThrowIfDisposed();

            using (_performanceMonitor.StartTiming("ShowNotification"))
            {
                _errorHandler.ExecuteWithRetry(() =>
                {
                    if (!_rateLimiter.CanMakeRequest("notification"))
                    {
                        _logger?.LogWarning("Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {Title}", title);
                        _performanceMonitor.IncrementCounter("notifications_rate_limited");
                        return;
                    }

                    var notificationData = new NotificationData(title, subtitle, icon, NotificationType.Standard, actions);
                    _queue.Enqueue(notificationData);
                    _ = ProcessQueue();
                    _performanceMonitor.IncrementCounter("notifications_queued");
                }, "ShowNotification");
            }
        }

        public void ShowMusicNotification(string title, string subtitle, string artist)
        {
            ThrowIfDisposed();

            _errorHandler.ExecuteWithRetry(() =>
            {
                if (!_rateLimiter.CanMakeRequest("music"))
                {
                    _logger?.LogWarning("Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {Title}", title);
                    return;
                }

                var notificationData = NotificationData.CreateMusicNotification(title, subtitle, artist);
                _queue.Enqueue(notificationData);
                _ = ProcessQueue();
            }, "ShowMusicNotification");
        }

        public void ShowCallNotification(string title, string caller, string icon = "üìû")
        {
            ThrowIfDisposed();

            _errorHandler.ExecuteWithRetry(() =>
            {
                if (!_rateLimiter.CanMakeRequest("call"))
                {
                    _logger?.LogWarning("Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–µ: {Title}", title);
                    return;
                }

                var notificationData = NotificationData.CreateCallNotification(title, caller, icon);
                _queue.Enqueue(notificationData);
                _ = ProcessQueue();
            }, "ShowCallNotification");
        }

        public void ShowCompactNotification(string icon = "üîî")
        {
            ThrowIfDisposed();

            _errorHandler.ExecuteWithRetry(() =>
            {
                if (!_rateLimiter.CanMakeRequest("compact"))
                {
                    _logger?.LogWarning("Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
                    return;
                }

                var notificationData = NotificationData.CreateCompactNotification(icon);
                _queue.Enqueue(notificationData);
                _ = ProcessQueue();
            }, "ShowCompactNotification");
        }

        private async Task ShowNotificationInternalAsync(NotificationData notificationData)
        {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await _displayManager.ShowNotificationAsync(notificationData, _config.MaxNotifications);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if (ShouldShowSystemNotification(notificationData))
            {
                try
                {
                    await _systemNotificationService.ShowNotificationAsync(notificationData);
                    _logger?.LogDebug("–ü–æ–∫–∞–∑–∞–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {Title}", notificationData.Title);
                }
                catch (Exception ex)
                {
                    _logger?.LogError(ex, "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {Title}", notificationData.Title);
                }
            }
        }

        private async Task ProcessQueue()
        {
            try
            {
                // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                if (_lifecycleManager.ActiveNotificationCount >= _config.MaxNotifications)
                    return;

                if (_queue.Count == 0)
                    return;

                NotificationData notificationData = null;

                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                lock (_queueProcessingLock)
                {
                    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
                    if (_lifecycleManager.ActiveNotificationCount >= _config.MaxNotifications)
                        return;

                    if (_queue.Count > 0)
                    {
                        notificationData = _queue.Dequeue();
                    }
                }

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                if (notificationData != null)
                {
                    try
                    {
                        await ShowNotificationInternalAsync(notificationData);
                    }
                    catch (Exception ex)
                    {
                        _logger?.LogError(ex, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {Title}", notificationData.Title);

                        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∏ –∑–∞–¥–µ—Ä–∂–∫–æ–π)
                        if (notificationData.RetryCount < 3)
                        {
                            notificationData.IncrementRetryCount();

                            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                            var delay = TimeSpan.FromMilliseconds(100 * notificationData.RetryCount);
                            _ = Task.Delay(delay).ContinueWith(_ =>
                            {
                                _queue.Enqueue(notificationData);
                                _logger?.LogInformation("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–ø—ã—Ç–∫–∞: {RetryCount}, –∑–∞–¥–µ—Ä–∂–∫–∞: {Delay}ms",
                                    notificationData.RetryCount, delay.TotalMilliseconds);
                            }, TaskScheduler.Default);
                        }
                        else
                        {
                            _logger?.LogWarning("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {Title} —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ 3 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫", notificationData.Title);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ ProcessQueue");
                // –ù–µ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Ç–∞–π–º–µ—Ä–∞
            }
        }

        private void OnCleanupTimerTick(object sender, EventArgs e)
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –æ—á–µ—Ä–µ–¥—å
                if (_lifecycleManager.ActiveNotificationCount == 0 && _queue.Count == 0)
                {
                    return; // –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞–±–æ—Ç—ã
                }

                System.Diagnostics.Debug.WriteLine("OnCleanupTimerTick –≤—ã–∑–≤–∞–Ω");
                _lifecycleManager.CleanupCompletedNotifications();
                _ = ProcessQueue(); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ—á–∏—Å—Ç–∫–µ
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "–û—à–∏–±–∫–∞ –≤ OnCleanupTimerTick");
            }
        }

        public void ClearAllNotifications()
        {
            ThrowIfDisposed();

            try
            {
                // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                _queue.Clear();

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                _lifecycleManager.ClearAllNotifications();

                _logger?.LogInformation("–û—á–∏—â–µ–Ω—ã –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—á–µ—Ä–µ–¥—å");
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
                throw;
            }
        }


        /// <summary>
        /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        /// </summary>
        private void ValidateConfiguration(NotificationConfiguration config)
        {
            if (config == null)
                throw new ArgumentNullException(nameof(config));

            if (config.MaxNotifications <= 0)
                throw new ArgumentException("MaxNotifications –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0", nameof(config));

            if (config.AutoHideTimeoutSeconds <= 0)
                throw new ArgumentException("AutoHideTimeoutSeconds –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0", nameof(config));

            if (config.MaxNotificationWidth <= 0)
                throw new ArgumentException("MaxNotificationWidth –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0", nameof(config));

            if (config.MinNotificationWidth <= 0)
                throw new ArgumentException("MinNotificationWidth –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0", nameof(config));

            if (config.MinNotificationWidth > config.MaxNotificationWidth)
                throw new ArgumentException("MinNotificationWidth –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ MaxNotificationWidth", nameof(config));
        }

        private void ThrowIfDisposed()
        {
            if (_disposed)
                throw new ObjectDisposedException(nameof(NotificationManager));
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        /// </summary>
        private void InitializeSystemNotifications()
        {
            if (!_config.EnableSystemNotifications)
            {
                _logger?.LogInformation("–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
                return;
            }

            try
            {
                if (!_systemNotificationService.IsSupported())
                {
                    _logger?.LogWarning("–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ");
                    return;
                }

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                _systemNotificationService.NotificationClicked += OnSystemNotificationClicked;
                _systemNotificationService.ActionClicked += OnSystemNotificationActionClicked;
                _systemNotificationService.NotificationDismissed += OnSystemNotificationDismissed;

                _logger?.LogInformation("–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
            }
        }

        /// <summary>
        /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        /// </summary>
        private bool ShouldShowSystemNotification(NotificationData notificationData)
        {
            if (!_config.EnableSystemNotifications)
                return false;

            if (!_systemNotificationService.IsSupported())
                return false;

            if (!_systemNotificationService.HasPermission())
                return false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            if (_config.SystemNotificationsForImportantOnly)
            {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                return notificationData.Type == NotificationType.Call;
            }

            if (!_config.SystemNotificationsForAllTypes)
            {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
                return notificationData.Type == NotificationType.Call || notificationData.Type == NotificationType.Music;
            }

            return true;
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
        /// </summary>
        private void OnSystemNotificationClicked(object sender, SystemNotificationClickedEventArgs e)
        {
            _logger?.LogInformation("–ö–ª–∏–∫ –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é: {NotificationId}", e.NotificationId);
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–µ–π—Å—Ç–≤–∏—é —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        /// </summary>
        private void OnSystemNotificationActionClicked(object sender, SystemNotificationActionClickedEventArgs e)
        {
            _logger?.LogInformation("–ö–ª–∏–∫ –ø–æ –¥–µ–π—Å—Ç–≤–∏—é —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {NotificationId}, Action: {ActionId}",
                e.NotificationId, e.ActionId);
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        /// </summary>
        private void OnSystemNotificationDismissed(object sender, SystemNotificationDismissedEventArgs e)
        {
            _logger?.LogInformation("–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {NotificationId}", e.NotificationId);
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        }

        private INotificationLifecycleManager CreateDefaultLifecycleManager(
            INotificationWindow notificationWindow,
            NotificationConfiguration config,
            ILoggerFactory loggerFactory)
        {
            var positioningService = new NotificationPositioningService(config,
                loggerFactory?.CreateLogger<NotificationPositioningService>());
            var pool = new NotificationPool(config,
                new SystemThemeService(loggerFactory?.CreateLogger<SystemThemeService>()),
                loggerFactory?.CreateLogger<NotificationPool>());

            return new NotificationLifecycleManager(
                notificationWindow ?? new NotificationWindow(config),
                positioningService,
                pool,
                loggerFactory?.CreateLogger<NotificationLifecycleManager>());
        }

        private INotificationDisplayManager CreateDefaultDisplayManager(INotificationLifecycleManager lifecycleManager, ILoggerFactory loggerFactory)
        {
            if (lifecycleManager == null)
                throw new ArgumentNullException(nameof(lifecycleManager));

            var validationService = new InputValidationService(
                _config,
                loggerFactory?.CreateLogger<InputValidationService>());

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–ª –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ lifecycleManager
            var pool = lifecycleManager.GetPool();

            var registry = new NotificationTypeHandlerRegistry(
                loggerFactory?.CreateLogger<NotificationTypeHandlerRegistry>());

            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            registry.RegisterHandler(new Services.Handlers.CompactNotificationHandler());
            registry.RegisterHandler(new Services.Handlers.MusicNotificationHandler());
            registry.RegisterHandler(new Services.Handlers.CallNotificationHandler());
            registry.RegisterHandler(new Services.Handlers.StandardNotificationHandler());

            return new NotificationDisplayManager(
                pool,
                lifecycleManager,
                validationService,
                registry,
                loggerFactory?.CreateLogger<NotificationDisplayManager>());
        }

        public void Dispose()
        {
            if (!_disposed)
            {
                _cleanupTimer?.Stop();
                if (_cleanupTimer != null)
                    _cleanupTimer.Tick -= OnCleanupTimerTick;

                ClearAllNotifications();

                _displayManager?.Dispose();
                _lifecycleManager?.Dispose();
                _errorHandler?.Dispose();
                _rateLimiter?.Dispose();
                _performanceMonitor?.Dispose();
                _systemNotificationService?.Dispose();
                _notificationWindow?.Dispose();

                _disposed = true;
                _logger?.LogInformation("NotificationManager –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω");
            }
        }
    }
}

